{"version":3,"sources":["Dropzone.js","ButtonsClassifier.js","RecordItem.js","Record.js","Reviewzone.js","AppBar.js","ExportData.js","serviceWorker.js","index.js","App.js"],"names":["baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","color","outline","transition","activeStyle","acceptStyle","rejectStyle","ReviewDropzone","props","onDrop","useCallback","acceptedFiles","length","console","log","reader","FileReader","onabort","onerror","onload","jsonReview","JSON","parse","result","reviewData","reviewState","readAsText","useDropzone","accept","multiple","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","useStyles","makeStyles","theme","button","margin","spacing","center","ButtonsClassifier","classes","className","Button","variant","onClick","isMatch","isDistinct","RecordItem","ListItem","Typography","component","itemText","root","flexGrow","paper","textAlign","palette","text","secondary","title","fontSize","Record","Card","CardHeader","recordData","identifiers","recordSource","record","subheader","dataset","CardContent","List","fields","map","value","index","Fragment","key","toString","Divider","ReviewZone","useState","pairIndex","setPairIndex","appData","matchCount","distinctCount","rec","label","getStats","Grid","container","item","xs","sm","label_str","menuButton","marginRight","saveButton","ButtonAppBar","AppBar","position","Toolbar","extendedIcon","IconButton","onToggleDark","ExportData","href","str","stringify","blob","Blob","type","window","URL","createObjectURL","exportUri","download","Boolean","location","hostname","match","ReactDOM","render","isState","setIsState","undefined","setData","state","prefersDarkMode","useMediaQuery","primary","blueGrey","setTheme","muiTheme","createMuiTheme","ThemeProvider","newPaletteType","CssBaseline","Container","maxWidth","fixed","paddingTop","align","gutterBottom","paragraph","Link","target","data","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.674707c1.chunk.js","sourcesContent":["import React, {useCallback, useMemo} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport 'typeface-roboto';\n\n\n\nconst baseStyle = {\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  color: '#bdbdbd',\n  outline: 'none',\n  transition: 'border .24s ease-in-out'\n};\n\nconst activeStyle = {\n  borderColor: '#2196f3'\n};\n\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\n\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\n\n\nexport default function ReviewDropzone(props) {\n\n  const onDrop = useCallback(acceptedFiles => {\n\n    if (acceptedFiles.length !== 1){\n      console.log(\"No valid files provided.\")\n      return \n    }\n\n    // show the file\n    console.log(acceptedFiles[0]);\n\n    // file reader\n    const reader = new FileReader()\n\n    // file reading failed\n    reader.onabort = () => console.log('file reading was aborted')\n    reader.onerror = () => console.log('file reading has failed')\n\n    // file reading successfull\n    reader.onload = () => {\n      const jsonReview = JSON.parse(reader.result);\n      // console.log(jsonReview)\n\n      // store data on a root level\n      props.reviewData(jsonReview);\n\n      // go the the next screen\n      props.reviewState(\"review\");\n\n    }\n\n    // read the file (this calls onload defined above)\n    reader.readAsText(acceptedFiles[0])\n\n  }, [props])\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n    // acceptedFiles,\n    // rejectedFiles\n  } = useDropzone({\n    onDrop, \n    accept: 'application/json,.json',\n    multiple: false\n  });\n\n  const style = useMemo(() => ({\n    ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  ]);\n\n  return (\n    <div {...getRootProps({style})}>\n      <input {...getInputProps()} />\n        {(isDragAccept && !isDragReject) && (<p>Drop the file here</p>)}\n        {isDragReject && (<p>Reject - Please drop a .json file</p>)}\n        {!isDragActive && (<p>Drag 'n' drop annotation file here, or click to select</p>)}\n    </div>\n\n\n  )\n}\n","import React from 'react';\nimport 'typeface-roboto';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n  center: {\n  },\n}));\n\nexport default function ButtonsClassifier(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.center}>\n      <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={props.isMatch}>\n        Match\n      </Button>\n      <Button variant=\"contained\" color=\"secondary\" className={classes.button} onClick={props.isDistinct}>\n        Distinct\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport 'typeface-roboto';\n\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\n\n\nexport default function RecordItem(props) {\n  return (\n    <ListItem alignItems=\"flex-start\">\n      <Typography component=\"p\">\n        {props.itemText}\n      </Typography>\n    </ListItem>\n\n  );\n}\n","import React from 'react';\nimport 'typeface-roboto';\n\nimport RecordItem from './RecordItem.js'\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  title: {\n    fontSize: 8,\n  },\n}));\n\nexport default function Record(props) {\n  const classes = useStyles();\n\n\n  return (\n\n\t<Card className={classes.paper}>\n    <CardHeader \n      title={(typeof props.recordData.identifiers[props.recordSource].record !== 'undefined') ? \"Record \" + props.recordData.identifiers[props.recordSource].record : \"\"} \n      subheader={props.recordData.identifiers[props.recordSource].dataset}\n    />\n\n    {/* The content of the card. */}\n    <CardContent>\n      <List className={classes.root}>\n\n        {props.recordData.fields.map((value, index) => {\n          return (\n            <React.Fragment key={index.toString()}>\n              <RecordItem itemText={value[props.recordSource].value} />\n              <Divider component=\"li\" />\n            </React.Fragment>\n          )\n        })}\n      \n      </List>\n\n    </CardContent>\n\n  </Card>\n\n  );\n}\n\n\n\n\n\n\n\n\n","import React, {useState } from 'react';\nimport 'typeface-roboto';\n\nimport ButtonsClassifier from './ButtonsClassifier.js'\nimport Record from './Record.js'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\n\nexport default function ReviewZone(props) {\n  const classes = useStyles();\n\n  // Declare a new state contant for the index\n  const [pairIndex, setPairIndex] = useState(0);\n\n  // Declare a new state contant for the index\n  const [appData, ] = useState(props.reviewData);\n  \n\n  const getStats = () => {\n\n    var matchCount = 0;\n    var distinctCount = 0;\n\n    for (var rec in appData['pairs']){\n      if (appData['pairs'][rec].label === 1) {\n        matchCount = matchCount + 1;\n      }\n      if (appData['pairs'][rec].label === 0) {\n        distinctCount = distinctCount + 1;\n      }\n    }\n\n    return({'matchCount': matchCount, 'distinctCount': distinctCount})\n  }\n\n  const onClick = () => {\n    if (pairIndex < appData['pairs'].length - 1) {\n      setPairIndex(pairIndex + 1);\n    } else {\n      console.log(\"Last record, we are done.\")\n      console.log(getStats())\n      props.reviewState(\"export\");\n    } \n  }\n\n  const isMatch = () => {\n    console.log(\"Records match\");\n    appData['pairs'][pairIndex].label = 1;\n    appData['pairs'][pairIndex].label_str = \"Match\"; \n    \n    onClick();\n  };\n\n  const isDistinct = () => {\n    console.log(\"Records are distinct\");\n    appData['pairs'][pairIndex].label = 0;\n    appData['pairs'][pairIndex].label_str = \"Distinct\";\n\n    onClick();\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n        \n        <Grid item xs={12} sm={6}>\n          <Record recordData={appData['pairs'][pairIndex]} recordSource=\"a\"/>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Record recordData={appData['pairs'][pairIndex]} recordSource=\"b\"/>\n        </Grid>     \n\n\n        {/* grid item for buttons at the bottom (or top))*/}\n        <Grid item xs={12} sm={6}>\n          <ButtonsClassifier isMatch={isMatch}  isDistinct={isDistinct}/>\n        </Grid>\n\n      </Grid>\n    </div>\n  );\n}\n\n\n\n","import React from 'react';\nimport 'typeface-roboto';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  saveButton: {\n  \tmarginRight: theme.spacing(2),\n  }\n}));\n\nexport default function ButtonAppBar(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n\n      \t  {/* Name of the page */}\n          <Typography variant=\"h6\" className={classes.title}>\n            RecordLinkage ANNOTATOR\n          </Typography>\n\n          {props.reviewState === \"never\" &&\n          <Button color=\"inherit\">\n          \t<SaveAltIcon className={classes.extendedIcon} />\n          \tExport\n          </Button>\n      \t}\n\n        <IconButton color=\"default\" onClick={props.onToggleDark}>\n          <Brightness4Icon/>\n        </IconButton>\n\n        </Toolbar>\n\n      </AppBar>\n    </div>\n  );\n}","import React from 'react';\nimport 'typeface-roboto';\n\nimport Button from '@material-ui/core/Button';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\n\n\nexport default function ExportData(props) {\n\n  // console.log(props.reviewData);\n\n  const exportUri = () => {\n    var str = JSON.stringify(props.reviewData, null, 2);\n\n    const blob = new Blob([str], { type: 'application/json' });\n    var csvURL = window.URL.createObjectURL(blob);\n    return(csvURL)\n  }\n\n  return (\n\n          <Button color=\"secondary\" href={exportUri()} download='result.json' >\n            <SaveAltIcon />\n            Export\n          </Button>\n  );\n}\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react'\nimport 'typeface-roboto';\n\nimport './App.css';\n\nimport ReviewDropzone from './Dropzone.js' \nimport ReviewZone from './Reviewzone.js'\nimport ButtonAppBar from './AppBar.js'\nimport ExportData from './ExportData.js'\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport {createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\n// favicon: https://favicon.io/favicon-generator/?t=RL&ff=Kreon&fs=80&fc=%23FFFFFF&b=rounded&bc=%2337474f\n\n\nexport default function App() {\n\n  // Declare a new state variable for stopping\n  const [isState, setIsState] = useState(\"upload\");\n\n  // Declare a new state contant for the index\n  const [appData, setData] = useState(undefined);\n\n  const reviewData = (data) => {\n    console.log(data);\n    setData(data);\n  };\n\n\n  const reviewState = (state) => {\n    setIsState(state);\n  };\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const [theme, setTheme] = useState({\n    palette: {\n      primary: blueGrey,\n      type: prefersDarkMode ? 'light' : 'dark', // strange. prefersDarkmode returns first the opposite\n    }\n  });\n\n  // we change the palette type of the theme in state\n  const toggleDarkTheme = () => {\n    let newPaletteType = theme.palette.type === \"light\" ? \"dark\" : \"light\";\n    setTheme({\n      palette: {\n        primary: blueGrey,\n        type: newPaletteType,\n      }\n    });\n  };\n\n  // we generate a MUI-theme from state's theme object\n  const muiTheme = createMuiTheme(theme);\n\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={muiTheme}>\n      <ButtonAppBar reviewState={isState} onToggleDark={toggleDarkTheme}/>\n      <CssBaseline />\n      <Container maxWidth=\"md\" fixed>\n\n\n        <Typography component=\"div\" style={{ paddingTop: '50px' }}>\n\n          {isState === 'upload' &&\n            <React.Fragment>\n              <Typography component=\"h2\" variant=\"h3\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                Record pair labeling for record linkage and data matching\n              </Typography>\n              <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n                Turn your record pairs into golden record pairs with this intuitive labeling tool. Labeled record pairs are important for training and validation record linkage and data matching processes. <Link href=\"https://github.com/J535D165/recordlinkage-annotator#create-annotation-file\" target=\"_blank\">Create an annotation file</Link> and start labeling your data!\n              </Typography>\n            <ReviewDropzone reviewData={reviewData} reviewState={reviewState}/>\n            </React.Fragment>\n          }\n\n          { isState === 'review' && \n            <ReviewZone reviewState={reviewState} reviewData={appData}/>\n          }\n\n          {isState === 'export' &&\n            <React.Fragment>\n              <Typography component=\"h2\" variant=\"h3\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                Done!\n              </Typography>\n              <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n                You finished the annotation. You can now export the data and save it for further analysis. \n              </Typography>\n\n              <ExportData reviewData={appData}/>\n\n            </React.Fragment>\n          }\n\n        </Typography>\n        \n      </Container>\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}"],"sourceRoot":""}